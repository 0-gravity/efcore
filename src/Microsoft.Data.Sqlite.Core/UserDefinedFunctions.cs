// <auto-generated />
using System;
using SQLitePCL;

namespace Microsoft.Data.Sqlite
{
    partial class SqliteConnection
    {
        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, TResult>(
            string name,
            Func<T1, T2, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 2)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 2, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, TResult>(
            string name,
            Func<T1, T2, T3, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 3)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 3, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, TResult>(
            string name,
            Func<T1, T2, T3, T4, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 4)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 4, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 5)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 5, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 6)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 6, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 7)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 7, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 8)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 8, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 9)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 9, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 10)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 10, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 11)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 11, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 12)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 12, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 13)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 13, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 14)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12]),
                            GetArgument<T14>(args[13])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 14, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="T15">The type of the fifteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 15)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12]),
                            GetArgument<T14>(args[13]),
                            GetArgument<T15>(args[14])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 15, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="T15">The type of the fifteenth function argument.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(
            string name,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, _, args) =>
                {
                    if (args.Length < 16)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12]),
                            GetArgument<T14>(args[13]),
                            GetArgument<T15>(args[14]),
                            GetArgument<T16>(args[15])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 16, null, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 2)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 2, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 3)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 3, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 4)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 4, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 5)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 5, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 6)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 6, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 7)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 7, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 8)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 8, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 9)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 9, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 10)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 10, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 11)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 11, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 12)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 12, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 13)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 13, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 14)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12]),
                            GetArgument<T14>(args[13])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 14, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined function.
        /// </summary>
        /// <typeparam name="TState">The type of the state object.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="T15">The type of the fifteenth function argument.</typeparam>
        /// <typeparam name="TResult">The type of the function result.</typeparam>
        /// <param name="name">Name of the function.</param>
        /// <param name="state">State object passed to each invokation of the function.</param>
        /// <param name="function">User defined function.</param>
        public virtual void CreateFunction<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(
            string name,
            TState state,
            Func<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function)
        {
            delegate_function_scalar scalarFunction = null;
            if (function != null)
            {
                scalarFunction = (ctx, data, args) =>
                {
                    if (args.Length < 15)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    SetFunctionResult(
                        function(
                            (TState)data,
                            GetArgument<T1>(args[0]),
                            GetArgument<T2>(args[1]),
                            GetArgument<T3>(args[2]),
                            GetArgument<T4>(args[3]),
                            GetArgument<T5>(args[4]),
                            GetArgument<T6>(args[5]),
                            GetArgument<T7>(args[6]),
                            GetArgument<T8>(args[7]),
                            GetArgument<T9>(args[8]),
                            GetArgument<T10>(args[9]),
                            GetArgument<T11>(args[10]),
                            GetArgument<T12>(args[11]),
                            GetArgument<T13>(args[12]),
                            GetArgument<T14>(args[13]),
                            GetArgument<T15>(args[14])),
                            ctx);
                };
            }

            CreateScalarFunction(name, 15, state, scalarFunction);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2>(
            string name,
            Func<TContext, T1, T2, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 2)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 2, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3>(
            string name,
            Func<TContext, T1, T2, T3, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 3)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 3, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4>(
            string name,
            Func<TContext, T1, T2, T3, T4, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 4)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 4, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 5)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 5, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 6)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 6, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 7)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 7, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 8)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 8, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 9)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 9, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 10)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]),
                        GetArgument<T10>(args[9]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 10, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 11)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]),
                        GetArgument<T10>(args[9]),
                        GetArgument<T11>(args[10]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 11, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 12)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]),
                        GetArgument<T10>(args[9]),
                        GetArgument<T11>(args[10]),
                        GetArgument<T12>(args[11]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 12, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 13)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]),
                        GetArgument<T10>(args[9]),
                        GetArgument<T11>(args[10]),
                        GetArgument<T12>(args[11]),
                        GetArgument<T13>(args[12]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 13, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 14)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]),
                        GetArgument<T10>(args[9]),
                        GetArgument<T11>(args[10]),
                        GetArgument<T12>(args[11]),
                        GetArgument<T13>(args[12]),
                        GetArgument<T14>(args[13]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 14, stepFunction, finalFunction);
            return resultSelector(seed);
        }

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="T15">The type of the fifteenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
            string name,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TContext> function)
            => CreateAggregate(name, default(TContext), function);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="T15">The type of the fifteenth function argument.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TContext CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TContext> function)
            => CreateAggregate(name, seed, function, (state) => state);

        /// <summary>
        /// Create user defined aggregate.
        /// </summary>
        /// <typeparam name="TContext">Type of the state buffer.</typeparam>
        /// <typeparam name="T1">The type of the first function argument.</typeparam>
        /// <typeparam name="T2">The type of the second function argument.</typeparam>
        /// <typeparam name="T3">The type of the third function argument.</typeparam>
        /// <typeparam name="T4">The type of the fourth function argument.</typeparam>
        /// <typeparam name="T5">The type of the fifth function argument.</typeparam>
        /// <typeparam name="T6">The type of the sixth function argument.</typeparam>
        /// <typeparam name="T7">The type of the seventh function argument.</typeparam>
        /// <typeparam name="T8">The type of the eighth function argument.</typeparam>
        /// <typeparam name="T9">The type of the ninth function argument.</typeparam>
        /// <typeparam name="T10">The type of the tenth function argument.</typeparam>
        /// <typeparam name="T11">The type of the eleventh function argument.</typeparam>
        /// <typeparam name="T12">The type of the twelfth function argument.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth function argument.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth function argument.</typeparam>
        /// <typeparam name="T15">The type of the fifteenth function argument.</typeparam>
        /// <typeparam name="TResult">Type returned by the result selector.</typeparam>
        /// <param name="name">Name of the aggregate.</param>
        /// <param name="seed">Seed for initializing the aggregate.</param>
        /// <param name="function">The user defined aggregate.</param>
        /// <param name="resultSelector">The user defined result selector.</param>
        /// <returns>The seed value for the state buffer.</returns>
        public virtual TResult CreateAggregate<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(
            string name,
            TContext seed,
            Func<TContext, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TContext> function,
            Func<TContext, TResult> resultSelector)
        {
            delegate_function_aggregate_step stepFunction = null;
            delegate_function_aggregate_final finalFunction = null;
            if (function != null)
            {
                stepFunction = (ctx, _, args) =>
                {
                    if (args.Length < 15)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    if (ctx.state == null)
                    {
                        ctx.state = new StateValue<TContext> { Value = seed };
                    }

                    ((StateValue<TContext>)ctx.state).Value = function(
                        ((StateValue<TContext>)ctx.state).Value, 
                        GetArgument<T1>(args[0]),
                        GetArgument<T2>(args[1]),
                        GetArgument<T3>(args[2]),
                        GetArgument<T4>(args[3]),
                        GetArgument<T5>(args[4]),
                        GetArgument<T6>(args[5]),
                        GetArgument<T7>(args[6]),
                        GetArgument<T8>(args[7]),
                        GetArgument<T9>(args[8]),
                        GetArgument<T10>(args[9]),
                        GetArgument<T11>(args[10]),
                        GetArgument<T12>(args[11]),
                        GetArgument<T13>(args[12]),
                        GetArgument<T14>(args[13]),
                        GetArgument<T15>(args[14]));
                };

                finalFunction = (ctx, _) =>
                    SetFunctionResult(resultSelector(((StateValue<TContext>)ctx.state).Value), ctx);
            }

            CreateAggregateFunction(
                name, 15, stepFunction, finalFunction);
            return resultSelector(seed);
        }

    }
}
