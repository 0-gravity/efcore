// <auto-generated />
namespace Microsoft.Data.Entity.Commands
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Commands.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string CollectionArgumentIsEmpty
        {
            get { return GetString("CollectionArgumentIsEmpty"); }
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string FormatCollectionArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The name '{migrationName}' is used by an existing migration.
        /// </summary>
        internal static string DuplicateMigrationName
        {
            get { return GetString("DuplicateMigrationName"); }
        }

        /// <summary>
        /// The name '{migrationName}' is used by an existing migration.
        /// </summary>
        internal static string FormatDuplicateMigrationName(object migrationName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateMigrationName", "migrationName"), migrationName);
        }

        /// <summary>
        /// More than one DbContext was found. Specify which one to use.
        /// </summary>
        internal static string MultipleContexts
        {
            get { return GetString("MultipleContexts"); }
        }

        /// <summary>
        /// More than one DbContext was found. Specify which one to use.
        /// </summary>
        internal static string FormatMultipleContexts()
        {
            return GetString("MultipleContexts");
        }

        /// <summary>
        /// More than one DbContext named '{name}' was found. Specify which one to use by providing its fully qualified name.
        /// </summary>
        internal static string MultipleContextsWithName
        {
            get { return GetString("MultipleContextsWithName"); }
        }

        /// <summary>
        /// More than one DbContext named '{name}' was found. Specify which one to use by providing its fully qualified name.
        /// </summary>
        internal static string FormatMultipleContextsWithName(object name)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleContextsWithName", "name"), name);
        }

        /// <summary>
        /// More than one DbContext named '{name}' was found. Specify which one to use by providing its fully qualified name using its exact case.
        /// </summary>
        internal static string MultipleContextsWithQualifiedName
        {
            get { return GetString("MultipleContextsWithQualifiedName"); }
        }

        /// <summary>
        /// More than one DbContext named '{name}' was found. Specify which one to use by providing its fully qualified name using its exact case.
        /// </summary>
        internal static string FormatMultipleContextsWithQualifiedName(object name)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleContextsWithQualifiedName", "name"), name);
        }

        /// <summary>
        /// No DbContext was found. Ensure that you're using the correct assembly and that the type is neither abstract nor generic.
        /// </summary>
        internal static string NoContext
        {
            get { return GetString("NoContext"); }
        }

        /// <summary>
        /// No DbContext was found. Ensure that you're using the correct assembly and that the type is neither abstract nor generic.
        /// </summary>
        internal static string FormatNoContext()
        {
            return GetString("NoContext");
        }

        /// <summary>
        /// No DbContext named '{name}' was found.
        /// </summary>
        internal static string NoContextWithName
        {
            get { return GetString("NoContextWithName"); }
        }

        /// <summary>
        /// No DbContext named '{name}' was found.
        /// </summary>
        internal static string FormatNoContextWithName(object name)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoContextWithName", "name"), name);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
