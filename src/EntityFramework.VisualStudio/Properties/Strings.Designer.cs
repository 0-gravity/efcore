// <auto-generated />
namespace Microsoft.Data.Entity.Design
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.VisualStudio.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string CollectionArgumentIsEmpty
        {
            get { return GetString("CollectionArgumentIsEmpty"); }
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string FormatCollectionArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The assembly '{contextAssemblyName}' contains multiple classes that derive from DbContext. Please specify the context type using the ContextType option.
        /// </summary>
        internal static string AssemblyContainsMultipleDbContext
        {
            get { return GetString("AssemblyContainsMultipleDbContext"); }
        }

        /// <summary>
        /// The assembly '{contextAssemblyName}' contains multiple classes that derive from DbContext. Please specify the context type using the ContextType option.
        /// </summary>
        internal static string FormatAssemblyContainsMultipleDbContext(object contextAssemblyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AssemblyContainsMultipleDbContext", "contextAssemblyName"), contextAssemblyName);
        }

        /// <summary>
        /// The assembly '{contextAssemblyName}' does not contain a class that derives from DbContext.
        /// </summary>
        internal static string AssemblyDoesNotContainDbContext
        {
            get { return GetString("AssemblyDoesNotContainDbContext"); }
        }

        /// <summary>
        /// The assembly '{contextAssemblyName}' does not contain a class that derives from DbContext.
        /// </summary>
        internal static string FormatAssemblyDoesNotContainDbContext(object contextAssemblyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AssemblyDoesNotContainDbContext", "contextAssemblyName"), contextAssemblyName);
        }

        /// <summary>
        /// More than one class named '{contextName}' that derives from DbContext was found. Please specify the fully qualified name of the one to use.
        /// </summary>
        internal static string MultipleContextsFound
        {
            get { return GetString("MultipleContextsFound"); }
        }

        /// <summary>
        /// More than one class named '{contextName}' that derives from DbContext was found. Please specify the fully qualified name of the one to use.
        /// </summary>
        internal static string FormatMultipleContextsFound(object contextName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleContextsFound", "contextName"), contextName);
        }

        /// <summary>
        /// No class named '{contextName}' that derives from DbContext was found.
        /// </summary>
        internal static string SpecifiedContextNotFound
        {
            get { return GetString("SpecifiedContextNotFound"); }
        }

        /// <summary>
        /// No class named '{contextName}' that derives from DbContext was found.
        /// </summary>
        internal static string FormatSpecifiedContextNotFound(object contextName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SpecifiedContextNotFound", "contextName"), contextName);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
