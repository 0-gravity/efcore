// <auto-generated />
namespace Microsoft.Data.Entity.AzureTableStorage
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.AzureTableStorage.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        public static string ArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        public static string CollectionArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        public static string InvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// Cannot modify an Azure Storage account from within the Entity Framework
        /// </summary>
        public static string CannotModifyAccount
        {
            get { return GetString("CannotModifyAccount"); }
        }

        /// <summary>
        /// Cannot access a public setter and getter for the property '{propertyName}' of type '{typeName}'
        /// </summary>
        public static string InvalidPoco(object propertyName, object typeName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPoco", "propertyName", "typeName"), propertyName, typeName);
        }

        /// <summary>
        /// This database cannot be used as an Azure Table Storage Database
        /// </summary>
        public static string AtsDatabaseNotInUse
        {
            get { return GetString("AtsDatabaseNotInUse"); }
        }

        /// <summary>
        /// Cannot read value of type '{typeName}' from '{accessName}'
        /// </summary>
        public static string InvalidReadType(object typeName, object accessName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidReadType", "typeName", "accessName"), typeName, accessName);
        }

        /// <summary>
        /// A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
        /// </summary>
        public static string PropertyWithStorageNameNotFound(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyWithStorageNameNotFound", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// This connection cannot be used as an Azure Table Storage Connection
        /// </summary>
        public static string AtsConnectionNotInUse
        {
            get { return GetString("AtsConnectionNotInUse"); }
        }

        /// <summary>
        /// This query command has no filter string. This will pull the entire table into memory. Best practices recommend filtering with a partition and row key.
        /// </summary>
        public static string MissingFilterString
        {
            get { return GetString("MissingFilterString"); }
        }

        /// <summary>
        /// This query command has no partition key and/or row key in the query filter. This can produce a large table scan that will reduce performance and may increase costs. Best practices recommend filtering with a partition and row key.
        /// </summary>
        public static string MissingPartitionOrRowKey
        {
            get { return GetString("MissingPartitionOrRowKey"); }
        }

        /// <summary>
        /// This entity has been modified on the server. Overwriting will destory changes that exist only on the server.
        /// </summary>
        public static string ETagPreconditionFailed
        {
            get { return GetString("ETagPreconditionFailed"); }
        }

        /// <summary>
        /// Could not save changes. See inner exception for details.
        /// </summary>
        public static string SaveChangesFailed
        {
            get { return GetString("SaveChangesFailed"); }
        }

        /// <summary>
        /// Table or row not found on server
        /// </summary>
        public static string ResourceNotFound
        {
            get { return GetString("ResourceNotFound"); }
        }

        /// <summary>
        /// Table not found on server
        /// </summary>
        public static string TableNotFound
        {
            get { return GetString("TableNotFound"); }
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' cannot be used as an Azure Table Storage timestamp because its type is '{propertyType}'. Only 'DateTimeOffset' properties can be used as timestamps.
        /// </summary>
        public static string BadTimestampType(object property, object entityType, object propertyType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BadTimestampType", "property", "entityType", "propertyType"), property, entityType, propertyType);
        }

        /// <summary>
        /// Executing request '{name}'
        /// </summary>
        public static string LogExecutingRequest(object name)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogExecutingRequest", "name"), name);
        }

        /// <summary>
        /// Retrying request to '{uri}'
        /// </summary>
        public static string LogRequestRetry(object uri)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogRequestRetry", "uri"), uri);
        }

        /// <summary>
        /// Response from '{uri}' = {statusCode} {description}
        /// </summary>
        public static string LogResponseReceived(object uri, object statusCode, object description)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogResponseReceived", "uri", "statusCode", "description"), uri, statusCode, description);
        }

        /// <summary>
        /// Sending request to '{uri}'
        /// </summary>
        public static string LogSendingRequest(object uri)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogSendingRequest", "uri"), uri);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
