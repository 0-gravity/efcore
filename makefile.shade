use assembly='WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
use namespace='System.IO.Packaging'

var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

use-standard-lifecycle
k-standard-goals

#write-package-references target='initialize' if='!IsMono'
  var programFilesX86='${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
  var buildProgram='${Path.Combine(programFilesX86, "MSBuild", "12.0", "Bin", "MSBuild.exe")}'
  for each='var projectFile in Files.Include("src/**/*.csproj").Include("test/**/*.csproj")'
    exec program='${buildProgram}' commandline='${projectFile} /t:WritePackageReferences'

var sqliteTestDir='test/EntityFramework.SQLite.FunctionalTests/bin/Debug'
#copy-sqlite target='initialize' if='!File.Exists(sqliteTestDir + "/sqlite3.dll")'
    var sourceDir='${Directory.EnumerateDirectories("packages", "Microsoft.Data.SQLite.*").OrderByDescending(d => d).First() + "/redist/x86"}'
    copy outputDir='${sqliteTestDir}'

#nupkg-patch target='compile'
    @{
        var packagePaths = Files.Include("artifacts/build/**/EntityFramework.Design.*.nupkg")
            .Exclude("**/*.symbols.nupkg");
        foreach (var packagePath in packagePaths)
        {
            using (var package = Package.Open(packagePath, FileMode.Open, FileAccess.ReadWrite))
            {
                CreatePartFromFile(
                    package,
                    @"src\EntityFramework.Design\tools\EntityFramework.psd1",
                    @"tools\EntityFramework.psd1");
                CreatePartFromFile(
                    package,
                    @"src\EntityFramework.Design\tools\EntityFramework.psm1",
                    @"tools\EntityFramework.psm1");
                CreatePartFromFile(
                    package,
                    @"src\EntityFramework.Design\tools\Handler.cs",
                    @"tools\Handler.cs");
                CreatePartFromFile(
                    package,
                    @"src\EntityFramework.Design\IHandler.cs",
                    @"tools\IHandler.cs");
                CreatePartFromFile(
                    package,
                    @"src\EntityFramework.Design\tools\init.ps1",
                    @"tools\init.ps1");
            }
        }
    }

functions
    @{
        PackagePart CreatePartFromFile(
            Package destination,
            string sourceFileName,
            string partUriString)
        {
            var partUri = PackUriHelper.CreatePartUri(new Uri(partUriString, UriKind.Relative));
            var packagePart = destination.CreatePart(partUri, "application/octet", CompressionOption.Maximum);

            using (var sourceStream = File.OpenRead(sourceFileName))
            using (var stream = packagePart.GetStream())
            {
                sourceStream.CopyTo(stream);
            }

            return packagePart;
        }
    }
