
var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

use-standard-lifecycle
k-standard-goals

#csproj-initialize target='initialize' if='(!IsMono && !IsTeamCity && E("APPVEYOR") == null) || E("IsEFPerfBuild") != null'
  var programFilesX86='${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
  var buildProgram='${Path.Combine(programFilesX86, "MSBuild", "14.0", "Bin", "MSBuild.exe")}'
  for each='var projectFile in Files.Include("src/**/*.csproj").Include("test/**/*.csproj")'
    exec program='${buildProgram}' commandline='${projectFile} /t:GenerateProjectLockTargets /v:m /nologo /p:Configuration=${E("Configuration")}'

#compile-tests target='compile'
  @{
    var BASE_DIR = Directory.GetCurrentDirectory();
    var TARGET_DIR = Path.Combine(BASE_DIR, "artifacts");
    var BUILD_DIR = Path.Combine(TARGET_DIR, "build");
    var Configuration = E("Configuration") ?? "Debug";

    var projectFiles = Files.Include("test/Microsoft.EntityFrameworkCore.Relational.FunctionalTests/project.json")
        .Include("test/Microsoft.EntityFrameworkCore.FunctionalTests/project.json")
        .Include("test/Microsoft.EntityFrameworkCore.Relational.Design.FunctionalTests/project.json");
    foreach (var projectFile in projectFiles)
    {
        DotnetPack(projectFile, BUILD_DIR, Configuration);
    }

    foreach (var nupkg in Files.Include(Path.Combine(BUILD_DIR, "*.FunctionalTests/" + Configuration + "/*.nupkg")))
    {
        File.Copy(nupkg, Path.Combine(BUILD_DIR, Path.GetFileName(nupkg)), true);
    }
  }
